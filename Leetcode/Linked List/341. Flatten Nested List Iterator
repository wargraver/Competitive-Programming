/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * class NestedInteger {
 *   public:
 *     // Return true if this NestedInteger holds a single integer, rather than a nested list.
 *     bool isInteger() const;
 *
 *     // Return the single integer that this NestedInteger holds, if it holds a single integer
 *     // The result is undefined if this NestedInteger holds a nested list
 *     int getInteger() const;
 *
 *     // Return the nested list that this NestedInteger holds, if it holds a nested list
 *     // The result is undefined if this NestedInteger holds a single integer
 *     const vector<NestedInteger> &getList() const;
 * };
 */

class NestedIterator {
public:
    vector<int> vect;
    int ct=0;
    void flatten(vector<NestedInteger> nestedList,vector<int> &vect,int i){
            if(i==nestedList.size()) return;
            if(nestedList[i].isInteger()){
                vect.push_back(nestedList[i].getInteger());
                flatten(nestedList,this->vect,i+1);
            }
            else{
                    flatten(nestedList[i].getList(),vect,0);
                    flatten(nestedList,vect,i+1);
                }
            }
    NestedIterator(vector<NestedInteger> &nestedList) {
        flatten(nestedList,this->vect,0);
    }
    
    int next() {
        ct++;
        return vect[ct-1];
    }
    
    bool hasNext() {
        if(this->ct==vect.size()) return false;
        else return true;
    }
};

/**
 * Your NestedIterator object will be instantiated and called as such:
 * NestedIterator i(nestedList);
 * while (i.hasNext()) cout << i.next();
 */
